@use "sass:list";

// ===| Utility functions |===

@function power($base, $exponent) {
    // TODO: Get this to work with fractional exponents
    @if $exponent == 0 { @return 1; }
    @else if $exponent > 0 { @return $base * power($base, $exponent - 1); }
    @else { @return 1 / power($base, -$exponent); }
}

@function map($closure, $list) {
    // Apply a function to each element of a list.
    $new-list: ();
    @each $element in $list { $new-list: append($new-list, meta.call($closure, $element)); }
    @return $new-list;
}

@function range($start, $end) {
    // Generate a range of numbers including $start up to but not including $end.
    $range: ();
    @for $i from $start through $end { $range: append($range, $i); }
    @return $range;
}

@function sizePerElement($space-allotted, $middle-padding, $n-elements) {
    $spaces-per-elements: calc(($n-elements - 1) / $n-elements);
    @return calc($space-allotted / $n-elements - $spaces-per-elements * $middle-padding);
}

// ===| Font loading |===

@font-face {
  font-family: "Iosevka";
  src: url("fonts/Iosevka Term Nerd Font Complete Mono.ttf");
}

@font-face {
  font-family: "Barlow";
  src: url("fonts/Barlow.ttf");
};

@font-face {
  font-family: "Lato Black";
  src: url("fonts/Lato/Lato-Black.ttf");
};


// ===| Sizes |===

$size-mobile: 400px;
$size-phablet: 550px;
$size-tablet: 750px;
$size-desktop: 1000px;
$size-desktop-hd: 1200px;

// ===| Fluid design |===
// Based on simplified calculations from https://utopia.fyi/blog/css-modular-scales.

$fluid-max-width: 1500;
$fluid-min-width: 320;
$fluid-min-size: 16;
$fluid-max-size: 20;
$fluid-min-ratio: 1.2;
$fluid-max-ratio: 1.33;

:root {
  --fluid-screen: 100vw;
  --fluid-bp: calc((var(--fluid-screen) - ((#{$fluid-min-size} / 16) * 1rem)) / ((#{$fluid-max-width} / 16) - (#{$fluid-min-size} / 16)));
}

@media screen and (min-width: 1500px) {
  :root {
    --fluid-screen: calc(#{$fluid-max-width} * 1px);
  }
}

:root {
    @for $i from -1 through 5 {
      --fluid-min-scale-#{$i}: #{power($fluid-min-ratio, $i)};
      --fluid-max-scale-#{$i}: #{power($fluid-max-ratio, $i)};

      --fluid-min-size-#{$i}: calc((#{$fluid-min-size} * var(--fluid-min-scale-#{$i})) / 16);
      --fluid-max-size-#{$i}: calc((#{$fluid-max-size} * var(--fluid-max-scale-#{$i})) / 16);

      --fluid-#{$i}: calc(((var(--fluid-min-size-#{$i}) * 1rem) + (var(--fluid-max-size-#{$i}) - var(--fluid-min-size-#{$i})) * var(--fluid-bp)));
    }
}

// ===| Palette |===

$color-background:  #24222B;
$color-box-background: #312E37;
$color-ui-inactive:  #B1AAB4;
$color-text: #EAE1E9;

$color-unimportant: #87828A;

$color-accent-primary: #8caba1;
$color-warning: #F2545B;
$color-code: #B0E298;

$small-projects__card-margin: 30px;

// ===| Sizing |===

html { box-sizing: border-box; }
*, *:before, *:after { box-sizing: inherit; }

// ===| Typography |===

body {
    background-color: $color-background;
    color: $color-text;
    font-size: var(--fluid-0);
    font-family: Barlow, Helvetica, Arial, sans-serif;
    line-height: 1.5;
    margin: 0;
}

h1 { font-size: var(--fluid-4); gap: var(--fluid-2); }
h2 { font-size: var(--fluid-3); gap: var(--fluid-1); }
h3 { font-size: var(--fluid-2); gap: var(--fluid-0); }
h4 { font-size: var(--fluid-2); }
h5 { font-size: var(--fluid-0); }

h1, h2, h3, h4, h5, h6 {
  line-height: 1.8;
  margin: 0;
  font-family: "Lato-Black", sans-serif;
}

h2, h3, h4 {
  text-decoration: $color-accent-primary underline;
  text-decoration-thickness: 2.5px;
}

p { line-height: 2em; }

a {
  color: $color-accent-primary;
  transition: 0.3s color ease;
  &:hover { color: $color-text; }
}

b { font-weight: bold; } // HACK: why is this necessary?

code, pre {
    font-family: Iosevka, monospace;
}

footer {
    padding-top: 1em;
    padding-bottom: 1em;
    padding-left: 10%;
    padding-right: 10%;
    display: flex;

    @extend .flex--rows;
    @extend .flex--justify-center;
    @extend .flex--align-center;
    text-align: center;
    background-color: $color-box-background;
}

.unimportant {
    color: $color-unimportant;
}

.items-strength {
    @media (max-width: $size-desktop) {
        .items-strength__icon { display: none; }
    }
}

.section--initial {
     @extend .flex;
     @extend .flex--cols;
     @extend .flex--centered;
     @extend .flex--spaced;
     height: 100vh;
}

.metadata {
    color: $color-unimportant;
}

// ===| Flexboxes |===

.flex {
    display: flex;
    align-items: stretch;
    align-content: stretch;
}

.flex--spaced { gap: 2em 2em; }
.flex--wrap { flex-wrap: wrap; }
.flex--cols { flex-direction: column; }
.flex--rows { flex-direction: row; }
.flex--end-aligned { justify-content: space-between; }
.flex--align-center { align-items: center; }
.flex--justify-center { justify-content: center; }

.flex--centered {
    @extend .flex--align-center;
    @extend .flex--justify-center;
}

.flex--cols.flex--reversed { flex-direction: column-reverse; }
.flex--rows.flex--reversed { flex-direction: row-reverse; }
.fullwidth { width: 100%; }

@media (min-width: $size-desktop) {
    $numbers: one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve;

    @for $i from 1 through length($numbers) {
        .flex--rows > .#{nth($numbers, $i)}-columns { width: percentage($i / length($numbers)); }
        .flex--cols > .#{nth($numbers, $i)}-columns { height: percentage($i / length($numbers)); }
    }
}

@media (max-width: $size-desktop) {
    .flex--responsive { flex-wrap: wrap; }
}

$spacing-values: (xs: .128em, sm: .272em, m: .618em, l: 1em, xl: 1.618em, xxl: 2.618em);

@each $name, $value in $spacing-values {
  .gap--#{$name} { margin: $value; }
  .gap--top-#{$name} { margin-top: $value; }
  .gap--right-#{$name} { margin-right: $value; }
  .gap--bottom-#{$name} { margin-bottom: $value; }
  .gap--left-#{$name} { margin-left: $value; }

  .pad--#{$name} { padding: $value; }
  .pad--top-#{$name} { padding-top: $value; }
  .pad--right-#{$name} { padding-right: $value; }
  .pad--bottom-#{$name} { padding-bottom: $value; }
  .pad--left-#{$name} { padding-left: $value; }
}

.project-card__buttons {
    @extend .flex;
    @extend .flex--rows;
    @extend .flex--end-aligned;
    @extend .flex--spaced;
    @extend .pad--top-l;
}


// ===| Icons |===
//
// Uses NerdFonts to render icons.
// The icon size defaults to the font size, but can be overridden using the icon-[size] classes.
// TODO: Fluid sizing for icon-[size] classes

.icon {
  font-family: 'Iosevka';
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  line-height: 1;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  transform: scale(1.7);
  padding-left: 0.15rem;
  padding-right: 0.15rem;
  user-select: none;
  display: inline-block;
}
.icon--small {
    @extend .icon;
    font-size: 20px;
}
.icon--medium {
    @extend .icon;
    font-size: 40px;
}
.icon--large {
    @extend .icon;
    font-size: 80px;
}

// Icon holders should be on <div>s outside the icons.

.icon-holder--square {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    background-color: $color-accent-primary;
    color: $color-background;
    border-radius: 4px;
}
.icon-holder--square-small {
    @extend .icon-holder--square;
    width: 30px;
    height: 30px;
}
.icon-holder--square-medium {
    @extend .icon-holder--square;
    width: 60px;
    height: 60px;
}
.icon-holder--square-large {
    @extend .icon-holder--square;
    width: 120px;
    height: 120px;
}

.icon-holder--circle {
    display: inline-flex;
    justify-content: center;
    align-items: center;
    background-color: $color-text;
    color: $color-background;
}
.icon-holder--circle-small {
    @extend .icon-holder--circle;
    width: 30px;
    height: 30px;
    border-radius: 15px;
}
.icon-holder--circle-medium {
    @extend .icon-holder--circle;
    width: 60px;
    height: 60px;
    border-radius: 30px;
}
.icon-holder--circle-large {
    @extend .icon-holder--circle;
    width: 120px;
    height: 120px;
    border-radius: 60px;
}

.section {
    margin: 100px;
    margin-left: 10%;
    margin-right: 10%;
}

.section--top {
    height: 80vh;
}

.section--top__main-title {
    text-align: center;
}

.section__title {
    display: flex;
    justify-content: center;
    align-items: center;
    gap: 2em;
    margin-top: 2em;
    margin-bottom: 2em;

    &> h1, h2, h3, h4, h5, h6 {
        color: $color-accent-primary;
        font-size: 2em;
        text-transform: lowercase;
    }

    &::before,
    &::after {
        content: '';
        flex: 1;
        height: 2px;
        background-color: $color-accent-primary; // Line color
    }
}

.section__under_title {
    font-style: italic;
    color: $color-unimportant;
}


.section__project-cards {
  display: flex;
  justify-content: space-between;
  flex-wrap: wrap;
  gap: 40px 30px;
  height: 500px;
  padding-top: 1.5em;
  padding-bottom: 1.5em;

}

._color-coded-box {
    padding: 1.5em;
    background-color: $color-box-background;
    margin-top: 2em;
    margin-bottom: 2em;
    border-left: 6px solid transparent;
    border-radius: 6px;
}

.box-code {
    @extend ._color-coded-box;
    border-color: $color-code;
    position: relative;

    .box-code__copy-button {
        width: 10px;
        height: 10px;
        position: absolute;
        top: 0;
        right: 0;
        margin-top: 10px;
        margin-right: 10px;
    }
}

.box-warning {
    @extend ._color-coded-box;
    border-color: $color-warning;
}

._shadowed-hover {
    transform: translateY(-12px);
    box-shadow: 0px 10px 10px rgba(0, 0, 0, .5);
}

.project-card {
    @extend ._color-coded-box;
    margin: 0; // Spacing is handled by the parent boxes

    border-color: $color-accent-primary;
    padding: 1.5em;
    background-color: $color-box-background;

    transition: transform 0.3s ease, box-shadow 0.3s ease;

    &:hover { @extend ._shadowed-hover; }

    border-left: 6px solid $color-accent-primary;

    @extend .flex;
    @extend .flex--cols;
    @extend .flex--end-aligned;
}

.card-container {
    margin-top: 3em;
    margin-bottom: 3em;
}

.card-container--selected {
    @extend .card-container;
    display: flex;
    @extend .flex--responsive;
    @extend .flex--spaced;
    @extend .flex--rows;
}

.card-container--small-projects {
    @extend .card-container;
    display: flex;
    flex-wrap: wrap;
    gap: $small-projects__card-margin $small-projects__card-margin;
}

.card-container--small-projects__card {
    @extend .project-card;

    // Using 6 items in the flexbox ensures it can be resized to be 3×2 -> 2×3 -> 1×6 in order of screen size.

    @media (min-width: $size-desktop) {
      width: sizePerElement(100%, $small-projects__card-margin, 3);
    }

    @media (max-width: $size-desktop) and (min-width: $size-phablet) {
        width: sizePerElement(100%, $small-projects__card-margin, 2);
    }

    @media (max-width: $size-phablet) {
      width: 100%;
    }
}

.project-card__overline {
    color: $color-unimportant;
}

// Outlined pictures

.outlined-media {
    position: relative;
    display: inline-block;

    &::after {
        z-index: -1; /* Move the outline below the picture */
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        border: 4px solid $color-text;
      }

      .outlined-media__image {
        position: relative;
        height: 100%;
        width: 100%;
        object-fit: cover;
        z-index: 1;
    }
}

.outlined-media--rect {
    @extend .outlined-media;

    &::after { transform: translate(2em, 2em); }
}

.outlined-media--round {
    @extend .outlined-media;

  &::after {
      border-radius: 50%;
      // HACK: Very goofy to have this be 110% instead of taking up expected amnt space
      width: 110%;
      height: 110%;
      transform: translate(-5%, -5%);
    }

    .outlined-media__image { border-radius: 50%; }
}

#initial-picture-of-me {
    @extend .outlined-media--round;

    // TODO: Having 270/180 hard coded here is probably not that great, maybe a % value?
    width: 270px;
    @media (max-width: $size-desktop) { width: 180px; }
    .outlined-media__image { width: 100%; }
}

// ===| Buttons |===

.button, button {
    font-size: var(--fluid-0);
  display: inline-block;
  padding: 0.2em 1.5em;
  color: $color-text;
  text-align: center;
  font-weight: 600;
  line-height: 40px;
  border: 1px solid $color-ui-inactive;
  border-radius: 10px;
  flex-grow: 1;
  text-decoration: none; // Overrides <a>

  background-color: transparent;
  cursor: pointer;

  transition: all 0.3s ease;

  &:active {
      // TODO: Make this transform respond properly on mobile as well by using CoffeeScript to
      // activate a subclass instead - currently, this doesn't do much on mobile since the active
      // time is super short!
      transform: scale(0.85);
  }

  .button--primary__arrow {
      display: inline-block;
      transition: transform 0.3s ease;
  }

  &:hover { @extend ._shadowed-hover; }

  &:hover, &:focus {
      // HACK: Avoids being overridden by <a> elements
    color: $color-text;
    border-color: $color-text;
  }

  &.button--primary {
      color: $color-background;
      background-color: $color-accent-primary;
      border-color: $color-accent-primary;
    }
}

.button--read-more {
    @extend .button--primary;
}

.button--back-to-home {}

.project-card:hover, .project-card:focus {
    // Provides cute responsive effects for the project card arrows on hover.
    .button--primary__arrow {
        transform: translateX(10px);
    }
}

// When the fade class is on an element, it is automatically detected
// once the element is on-screen, at which point it is faded in over a short period of
// time.
//
// BUG: This causes issues with other transitions, so there's some redundant divs
// in index.html right now to hack around that.

.fade {
  opacity: 0;
  transform: translateY(60px);
  transition: transform 2s cubic-bezier(0.16, 1, 0.3, 1), opacity 1.2s ease;
}

.fade--visible {
  opacity: 1;
  transform: translateY(0px);
}
